{{template "base" .}}

{{define "title"}}
  Bronze plan
{{end}}

{{define "content"}}
  {{$widget := index .Data "widget"}}
  <hr />

  <img src="/static/{{$widget.Image}}" class="image-fluid mx-auto rounded d-block" alt="widget-image" />

  <h2 class="mb-3 text-center">{{$widget.Name}} {{formatCurrency $widget.Price}}</h2>

  <p>{{$widget.Description}}</p>

  <hr />

  <div class="alert alert-danger text-center d-none" id="card_messages"></div>

  <form 
    action="/payment-succeeded-temp" method="post" autocomplete="off"
    name="charge-form" id="charge_form" 
    class="d-block needs-validation charge-form"
  >
    <input type="hidden" name="widget-id" id="widget_id" value="{{$widget.ID}}" />
    <input type="hidden" name="amount" id="amount" value="{{$widget.Price}}" />

    <div class="mb-3">
      <label for="first_name" class="form-label">First name</label>
      <input type="text" class="form-control" id="first_name" name="first-name" 
        required="" autocomplete="first-name-new"
      />
    </div>

    <div class="mb-3">
      <label for="last_name" class="form-label">Last name</label>
      <input type="text" class="form-control" id="last_name" name="last-name" 
        required="" autocomplete="last-name-new"
      />
    </div>

    <div class="mb-3">
      <label for="cardholder_email" class="form-label">Email</label>
      <input type="email" class="form-control" id="cardholder_email" name="cardholder-email" 
        required="" autocomplete="cardholder-email-new"
      />
    </div>

    <div class="mb-3">
      <label for="cardholder_name" class="form-label">Cardholder name</label>
      <input 
        type="text" class="form-control" id="cardholder_name" name="cardholder-name"
        required="" autocomplete="cardholder-name-new"
      />
    </div>

    <div class="mb-3">
      <label for="card-element" class="form-label">Card number</label>
      <div id="card-element" class="form-control"></div>
      <div class="alert alert-danger text-center d-none" id="card-errors" role="alert"> </div>
      <div class="alert alert-success text-center d-none" id="card-success" role="alert"></div>
    </div>

    <hr/>

    <a id="pay_button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Subscribe for {{formatCurrency $widget.Price}}/month</a>

    <div id="payment_processing" class="d-none text-center">
      <div class="spinner-border text-primary">
        <span class="visually-hidden">loading...</span>
      </div>
    </div>

    <input type="hidden" name="payment-intent" id="payment_intent" />
    <input type="hidden" name="payment-intent-method" id="payment_intent_method" />
    <input type="hidden" name="payment-intent-amount" id="payment_intent_amount" />
    <input type="hidden" name="payment-intent-currency" id="payment_intent_currency" />

  </form>
{{end}}

{{define "js"}}
  {{$widget := index .Data "widget"}}
  <script src="https://js.stripe.com/v3/"></script>

  <script>
    let stripe
    let card
    const cardMessages = document.getElementById("card_messages");
    const payButton = document.getElementById("pay_button");
    const paymentProcessing = document.getElementById("payment_processing");
    const form = document.getElementById("charge_form");

    stripe = Stripe("{{.StripeKey}}");

    function hidePaymentButton() {
      payButton.classList.add("d-none");
      paymentProcessing.classList.remove("d-none");
    }

    function showPaymentButton() {
      payButton.classList.remove("d-none");
      paymentProcessing.classList.add("d-none");
    }

    function showCardError(errorMessage) {
      cardMessages.classList.remove("d-none")
      cardMessages.classList.remove("alert-success")
      cardMessages.classList.add("alert-danger")
      cardMessages.textContent = errorMessage
    }

    function showCardSuccess() {
      cardMessages.classList.remove("d-none")
      cardMessages.classList.add("alert-success")
      cardMessages.classList.remove("alert-danger")
      cardMessages.textContent = "Payment processed successfully!"
    }

    function val() {
      form.classList.add("was-validated");
      if (form.checkValidity() === false) {
        this.event.preventDefault();
        this.event.stopPropagation();
        return;
      }
      hidePaymentButton()
      stripe.createPaymentMethod({
        type: "card",
        card,
        billing_details: {
          email: document.getElementById("cardholder_email").value,
        },
      }).then(stripePaymentMethodHandler)
    }

    function stripePaymentMethodHandler(result) {
      if (result.error) {
        showCardError(result.error.message);
      } else {
        // create customer and subscribe to plan
        const payload = {
          amount: document.getElementById("amount").value,
          currency: 'cad',
          plan: "{{$widget.PlanId}}",
          payment_method: result.paymentMethod.id,
          email: document.getElementById("cardholder_email").value,
          first_name: document.getElementById("first_name").value,
          last_name: document.getElementById("last_name").value,
          expiry_month: result.paymentMethod.card.exp_month,
          expiry_year: result.paymentMethod.card.exp_year,
          card_type: result.paymentMethod.card.brand,
          last_four: result.paymentMethod.card.last4,
          widget_id: document.getElementById("widget_id").value
        };

        const body = JSON.stringify(payload)

        const requestOptions = {
          method: "post",
          headers: {
            "Accept": "application/json",
            "Content-Type": "application/json"
          },
          body,
        };

        fetch("{{.API}}/api/create-customer-and-subscribe-to-plan", requestOptions)
        .then((res) => res.json())
        .then((res) => {
          paymentProcessing.classList.add("d-none")
          showCardSuccess()
          sessionStorage.setItem("payment_details", body);
          location.href = "/plans/bronze-plan-receipt"
        })
      }
    }

    
    (function() {
      let elements = stripe.elements();

      const style = {
        base: {
          fontSize: "16px",
          lineHeight: "24px"
        }
      };

      card = elements.create("card", {
        style,
        hidePostalCode: true
      });

      card.mount("#card-element");

      card.addEventListener("change", function(event) {
        const errorElement = document.getElementById("card-errors");
        if (event.error) {
          errorElement.classList.remove("d-none");
          errorElement.textContent = event.error.message;
        } else {
          errorElement.classList.add("d-none");
          errorElement.textContent = "";
        }
      }) 
    })()
  </script>
{{end}}